import React, { useState, useEffect } from 'react';
import { useParams, useNavigate, Link } from 'react-router-dom';
import { Template } from '../../types';
import { templatesApi, landingsApi } from '../../services/api';
import { Button, LoadingSpinner } from '../../components';
import { useApi } from '../../hooks/useApi';
import './TemplateDetails.css';

export const TemplateDetails: React.FC = () => {
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();
  const [creating, setCreating] = useState(false);
  
  const { data: template, loading, error, execute } = useApi<Template>();

  useEffect(() => {
    if (id) {
      execute(() => templatesApi.getById(id));
    }
  }, [id, execute]);

  const handleCreateLanding = async () => {
    if (!template) return;

    setCreating(true);
    try {
      const landingData = {
        templateId: template.id,
        name: `–õ–µ–Ω–¥–∏–Ω–≥: ${template.name}`,
        createdAt: new Date().toISOString(),
        blocks: template.editableBlocks.map((block, index) => ({
          id: block.id,
          type: block.type,
          content: block.defaultValue,
          order: index,
        })),
      };

      const landing = await landingsApi.create(landingData);
      navigate(`/constructor/${landing.id}`);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ª–µ–Ω–¥–∏–Ω–≥–∞:', err);
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ª–µ–Ω–¥–∏–Ω–≥');
    } finally {
      setCreating(false);
    }
  };

  if (loading) {
    return (
      <div className="loading-state">
        <LoadingSpinner size="large" />
        <p>–ó–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–∞...</p>
      </div>
    );
  }

  if (error || !template) {
    return (
      <div className="error-state">
        <h2>–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω</h2>
        <p>{error?.message || '–ó–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'}</p>
        <Link to="/" className="back-btn">
          –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞—Ç–∞–ª–æ–≥—É
        </Link>
      </div>
    );
  }

  return (
    <div className="template-details">
      <nav className="breadcrumb">
        <Link to="/">–ö–∞—Ç–∞–ª–æ–≥ —à–∞–±–ª–æ–Ω–æ–≤</Link>
        <span> / </span>
        <span>{template.name}</span>
      </nav>

      <div className="template-header">
        <div className="template-image">
          <img src={template.thumbnail} alt={template.name} />
          {template.price === 0 && (
            <div className="price-badge free">–ë–µ—Å–ø–ª–∞—Ç–Ω–æ</div>
          )}
          {template.price > 0 && (
            <div className="price-badge paid">{template.price} ‚ÇΩ</div>
          )}
        </div>
        
        <div className="template-info">
          <h1>{template.name}</h1>
          <p className="template-description">{template.description}</p>
          
          <div className="template-meta">
            <div className="meta-grid">
              <div className="meta-item">
                <strong>–ê–≤—Ç–æ—Ä:</strong>
                <span>{template.author}</span>
              </div>
              <div className="meta-item">
                <strong>–õ–∏—Ü–µ–Ω–∑–∏—è:</strong>
                <span>{template.license}</span>
              </div>
              <div className="meta-item">
                <strong>–ë–ª–æ–∫–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</strong>
                <span>{template.editableBlocks.length}</span>
              </div>
            </div>
          </div>

          <div className="action-section">
            <Button
              onClick={handleCreateLanding}
              disabled={creating}
              className="create-btn"
            >
              {creating ? '–°–æ–∑–¥–∞–Ω–∏–µ...' : '–°–æ–∑–¥–∞—Ç—å –ª–µ–Ω–¥–∏–Ω–≥'}
            </Button>
            <p className="action-hint">
              –ù–∞–∂–º–∏—Ç–µ —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ª–µ–Ω–¥–∏–Ω–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
            </p>
          </div>
        </div>
      </div>

      <div className="template-content">
        <section className="blocks-section">
          <h2>–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–µ –±–ª–æ–∫–∏</h2>
          <div className="blocks-list">
            {template.editableBlocks.map(block => (
              <div key={block.id} className="block-item">
                <div className="block-icon">
                  {block.type === 'text' ? 'üìù' : 'üñºÔ∏è'}
                </div>
                <div className="block-info">
                  <h4>{block.label}</h4>
                  <p>–¢–∏–ø: {block.type === 'text' ? '–¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ' : '–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'}</p>
                  {block.required && <span className="required-badge">–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π</span>}
                </div>
              </div>
            ))}
          </div>
        </section>

        <section className="keywords-section">
          <h3>–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞</h3>
          <div className="keywords-list">
            {template.keywords.map(keyword => (
              <span key={keyword} className="keyword-tag">#{keyword}</span>
            ))}
          </div>
        </section>
      </div>
    </div>
  );
};